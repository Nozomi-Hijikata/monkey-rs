use std::str::FromStr;
use crate::ast::{Stmt, Expr, Opcode, Program};
use std::collections::HashMap;

grammar;

// non-terminals(Program)
pub Program: Program = {
    <statements:Stmts> => Program { statements: statements }
};

// non-terminals(Statements)
Stmts: Vec<Box<Stmt>> = {
    <v:(<Stmt>)*> => v
};

pub Stmt: Box<Stmt> = {
  LetStmt,
  ReturnStmt,
  ExprStmt,
  BlockStmt,
};


LetStmt: Box<Stmt> = {
    "let" <name:Identifier> "=" <value:Expr> ";" => Box::new(Stmt::Let{<>}),
};

ReturnStmt: Box<Stmt> = {
    "return" <return_value:Expr> ";" => Box::new(Stmt::Return{ <> }),
};

// TODO: Make semicolon optional
ExprStmt: Box<Stmt> = {
    <expression:Expr> ";" => Box::new(Stmt::Expr{ <> }),
};

// NOTE: Block statement does not allow empty Block to avoid the ambuigity with HashLit
BlockStmt: Box<Stmt> = {
    "{" <statements:NonEmptyStmts> "}" => Box::new(Stmt::Block { <> }),
};

NonEmptyStmts: Vec<Box<Stmt>> = {
    <first:Stmt> <rest:Stmts> => {
        let mut stmts = vec![first];
        stmts.extend(rest);
        stmts
    }
};

// non-terminals(Expression)
pub Expr: Box<Expr> = {
  #[precedence(level="0")]
  TermExpr,
  #[precedence(level="1")]
  IndexExpr,
  #[precedence(level="2")]
  CallExpr,
  #[precedence(level="3")] #[assoc(side="left")]
  <left:Expr> <operator:ProductOp> <right:Expr> => Box::new(Expr::InfixOp{<>}),
  #[precedence(level="4")] #[assoc(side="left")]
  <left:Expr> <operator:SumOp> <right:Expr> => Box::new(Expr::InfixOp{<>}),
  #[precedence(level="5")] #[assoc(side="left")]
  <left:Expr> <operator:LessGreaterOp> <right:Expr> => Box::new(Expr::InfixOp{<>}),
  #[precedence(level="6")] #[assoc(side="left")]
  <left:Expr> <operator:EqualsOp> <right:Expr> => Box::new(Expr::InfixOp{<>}),
  #[precedence(level="7")]
  IfExpr,
  FuncLit,
  ArrayLit,
  #[precedence(level="8")]
  HashLit,
};

IdentExpr: Box<Expr> = {
    Identifier => Box::new(Expr::Identifier(<>)),
}

IndexExpr: Box<Expr> = {
    <left:IdentExpr> "[" <index:Expr> "]" => Box::new(Expr::Index{<>}),
    <left:ArrayLit> "[" <index:Expr> "]" => Box::new(Expr::Index{<>}),
};

IfExpr: Box<Expr> = {
    "if" "(" <condition:Expr> ")" <consequence:BlockStmt> "else" <alternative:BlockStmt>
      => Box::new(Expr::If { condition: condition, consequence: consequence, alternative: Some(alternative) }),
    "if" "(" <condition:Expr> ")" <consequence:BlockStmt>
      =>Box::new(Expr::If { condition: condition, consequence: consequence, alternative: None }),
};

FuncLit: Box<Expr> = {
    "fn" "(" <parameters:Params> ")" <body:BlockStmt> => Box::new(Expr::FuncLit{<>}),
};

Params: Vec<Box<Expr>> = Comma<Expr>;

CallExpr: Box<Expr> = {
    <function:IdentExpr> "(" <arguments:Arguments> ")" => Box::new(Expr::Call{<>}),
    <function: FuncLit> "(" <arguments:Arguments> ")" => Box::new(Expr::Call{<>}),
};

ArrayLit: Box<Expr> = {
    "[" <elements:Arguments> "]" => Box::new(Expr::ArrayLit{<>}),
};

Arguments: Vec<Box<Expr>> = Comma<Expr>;

HashLit: Box<Expr> = {
    "{" <pairs:Comma<HashPair>> "}" => Box::new(Expr::HashLit{<>}),
};

HashPair: (Box<Expr>, Box<Expr>) = {
  <key: Expr> ":" <value: Expr> => (key, value)
};

TermExpr: Box<Expr> = {
    Num => Box::new(Expr::Number(<>)),
    Bool => Box::new(Expr::Boolean(<>)),
    IdentExpr,
    String => Box::new(Expr::StringLit(<>)),
    <operator:PrefixOp> <right:TermExpr> => Box::new(Expr::PrefixOp{ <> }),
    "(" <Expr> ")",
};

// precedence of terminals
match {
    "true",
    "false",
    "let",
    "return",
    "if",
    "else",
    "fn",
} else {
    r"[a-zA-Z_][a-zA-Z0-9_]*",
    _
}

// terminals
Num: i64 = {
    r"[0-9]+" => i64::from_str(<>).unwrap()
};

Identifier: String = {
    r"[a-zA-Z_][a-zA-Z0-9_]*" => <>.to_string()
};

Bool: bool = {
    "true" => true,
    "false" => false
};

String: String = {
    r#""[^"]*""# => <>.to_string()
};

SumOp: Opcode = {
    "+" => Opcode::Add,
    "-" => Opcode::Sub,
};

ProductOp: Opcode = {
    "*" => Opcode::Mul,
    "/" => Opcode::Div,
};

PrefixOp: Opcode = {
    "+" => Opcode::Add,
    "-" => Opcode::Sub,
    "!" => Opcode::Bang,
};

EqualsOp: Opcode = {
    "==" => Opcode::Eq,
    "!=" => Opcode::NotEq,
};

LessGreaterOp: Opcode = {
    "<" => Opcode::Lt,
    ">" => Opcode::Gt,
};

// macros

Comma<T>: Vec<T> = {
    <mut v:(<T> ",")*> <e:T?> => match e {
        None => v,
        Some(e) => {
            v.push(e);
            v
        }
    }
};

